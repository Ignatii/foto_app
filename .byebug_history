continue
I18n.locale
continue
I18n.t(:user_name,scope: %i[active_admin models_db image])
i18n.t(:user_name,scope: %i[active_admin models_db image])
label: i18n.t(:user_name,scope: %i[active_admin models_db image])
label: I18n.t(:user_name,scope: %i[active_admin models_db image])
I18n.t(:user_name,
continue
I18n.t('activerecord')[:models][:attributtes][:visit][:enable]
I18n.t('activerecord')[:models][:attributtes][:visit]
I18n.t('activerecord')[:models][:attributtes]
I18n.t('activerecord')[:models][:attributes]
I18n.t('activerecord')[:attributes]
I18n.t('activerecord')[:models]
I18n.t[:activerecord]
I18n.t('activerecord')
I18n.t('activemodel')
I18n.t('ru')
I18n.t('')
I18n.t('ru:activemodel')
I18n.t('ru')
continue
$redis_api
continue
   13:         "self/media/recent/?access_token=#{user[:insta_token]}&count=12").read
response = open('https://api.instagram.com/v1/users/'\
continue
visits
visit
country.visitvisit
country.visit
country.visits
country
visit
User.find_by(id: :user_id).name
:user_id
continue
params
continue
image.user.email.include? '@'
image.user
continue
e == URI::SocketError
continue
e.class.to_s == 'SocketError'
e.class == 'SocketError'
e.class
e.class.to_s == 'URI::SocketError'
e.class == 'URI::SocketError'
continue
e.class
e.to_s
e
continue
@images_csv.to_a.to_xls(:only => [:id, :image, :created_at,:aasm_state, :title_img,:tags, :likes_img,:id_u, :name,:email, :id_c,:c_id_u, :body])
                                             :c_id_u, :body])
                                             :email, :id_c,
                                             :id_u, :name,
                                             :tags, :likes_img,
                                             :aasm_state, :title_img,
@images_csv.to_a.to_xls(:only => [:id, :image, :created_at,
                                             :c_id_u, :body])
                                             :email, :id_c,
                                             :id_u, :name,
                                             :tags, :likes_img,
                                             :aasm_state, :title_img,
@images_csv.to_a.to_xls(:only => [:id, :image, :created_at,
continue
builder.to_xml
builder
continue
comments.count
comments
continue
image
comments
continue
image
image_table
images
continue
Comment.where("body LIKE '%ererer%' AND co")
Comment.where("body LIKE '%ererer%'")
Comment.where("commentable_type == 'Image' and body LIKE '%ererer%'")
Comment.where("commentable_type == 'Image' and body LIKE '%test%'")
Comment.where("commentable_type == 'Image' and body LIKE '%"+search+"%'")
search
Comment.where("commentable_type == 'Image' and body LIKE '%#{search}%'")
Comment.where("commentable_type == 'Image' and body like '%#{search}%'")
Comment.distinct.select(:commentable_id).where("commentable_type == 'Image' and body like '%#{search}%'").pluck(:commentable_id)
Comment.where("commentable_type == 'Image' and body LIKE '%ererer%'")
Comment.where("commentable_type == 'Image' and body LIKE '%ererer%'").pluck(:commentable_id)
Comment.distinct(:commentable_id).select(:commentable_id).where("commentable_type == 'Image' and body LIKE '%ererer%'").pluck(:commentable_id)
Comment.distinct.select(:commentable_id).where("commentable_type == 'Image' and body LIKE '%ererer%'").pluck(:commentable_id)
Comment.where('body like "%ererer%"')
Comment.where(body: 'ererer')
Comment.select(:commentable_id).where("commentable_type == 'Image' and body like '%ererer%'").pluck(:commentable_id)
Commentselect(:commentable_id).where("commentable_type == 'Image' and body like '%ererer%'")
Commentselect(:commentable_id).where("commentable_type == 'Image' and body like '%ererer%'").pluck(:commentable_id)
Comment.distinct.select(:commentable_id).where("commentable_type == 'Image' and body like '%ererer%'").pluck(:commentable_id)
Comment.distinct.select(:commentable_id).where("commentable_type == 'Image' and body like '%#{search}%'").pluck(:commentable_id)
search
continue
args
continue
parent
args
continue
search
ids
continue
ids
continue
Image.joins(:user).where(name.match("%#{search}%")).ids
ENV['RAILS_ENV']
continue
ids
continue
search
params
continue
ENV['RAILS_ENV']
continue
User.where('LOWER( name ) LIKE "%игнатий%" COLLATE UTF8_GENERAL_CI')
User.where('LOWER( name ) LIKE "%игнатий%"')
User.where('LOWER(name) LIKE "%игнатий%"')
User.where('sdlkjflksjdfklsj(name) LIKE "%игнатий%"')
User.where('lower(name) LIKE "%игнатий%"')
User.where('lowercase(users.name) LIKE "%игнатий%"')
User.where('lower(users.name) LIKE "%игнатий%"')
Image.joins(:user).where('lower(users.name) LIKE "%игнатий%"')
Image.joins(:user).where('lower(users.name::text) LIKE ?', "%игнатий%")
Image.joins(:user).where('lower(users.name) LIKE ?', "%игнатий%")
Image.joins(:user).where('lower(users.name) LIKE ?', "%Игнатий%")
Image.joins(:user).where('lower(users.name) LIKE ?', "%#{search}%")
Image.joins(:user).where('lower(users.name) LIKE ?', "%#{search.downcase}%")
Image.joins(:user).where('LOWER(users.name) LIKE ?', "%#{search.downcase}%")
continue
Image.joins(:user).where(name.match("%#{search}%"))
Image.joins(:user).where(name.matches("%#{search}%"))
Image.joins(:user).where(user.name.matches("%#{search}%"))
Image.joins(:user).where(user[:name].matches("%#{search}%"))
Image.joins(:user).where('LOWER(users.name) MATCH ?', "%#{search.downcase}%")
User.all.where('lower(name) like ?','игнат')
Image.joins(:user).where('LOWER(users.name) LIKE ?', "%#{search.downcase}%")
continue
search
Image.joins(:user).where('users.name LIKE ?', search)
continue
search
continue
outcome_true.result.class
outcome_true
continue
outcome_true.valid?
continue
outcome_true
outcome_true.valid?
continue
outcome_false.errors.full_messages.to_sentence
continue
@images
s.image.file.file
s.image.file
s.image
s.valid?
s = user.images.build(remote_image_url: params[:url_image][:url])
user.images.build(remote_image_url: params[:url_image][:url])
params
@image
continue
params
@images = user.images.build(remote_image_url: params[:url_image][:url])
@image
continue
@images = user.images.build(remote_image_url: params[:url_image][:url])
params
@image
continue
params[:url_image][:url]
params[:url_image]
user.images.build(remote_image_url: params[:url_image][:url])
params
@image
continue
outcome_true.result
outcome_true.valid?
outcome_true
continue
outcome_true.valid?
outcome_true
outcome_true.valid?
continue
outcome_true
continue
@image.save
@images = user.images.build(remote_image_url: params[:url_image][:url])
params[:url_image][:url]
params[:url_image]
params
@image
continue
outcome_false
continue
outcome_true.errors
outcome_true
outcome_true.valid?
continue
params[:image][:image]
params[:image]
params
continue
params[ima
params[:image][:image]
params[:image]
params
continue
params[:image]
params
params.key?(:image)
flash
continue
flash
params.key?(:image)
params.key? :image
params.key? image
params
continue
expect(flash[:warning]).to be_present
continue
result.valid?
result
continue
params
continue
params
continue
current_user
params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
params
continue
params
continue
image.id
continue
params
continue
params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
params
continue
params
continue
image.id
image
continue
