continue
 @result_false.result
 @result_false
continue
image.likes.where(user_id: user.id)
continue
image.likes.where(user_id: user.id)
debugger
continue
@result_true
@result_true.result
continue
image.likes.where(user_id: user[:id]).count
continue
Like.where(image_id: Image.second.id).first
Like.where(image_id: Image.second.id).first.delete
continue
Like.all
continue
image.likes.where(user_id: user[:id]).count
Like.all
image.likes.where(user_id: user[:id]).count
continue
image
image.likes.where(user_id: user[:id]).count
continue
Like.all
continue
Like.second.destroy
Like.second.delete
Like.all
continue
image
Like.all
Image.all
image.likes.where(user_id: user[:id]).count
continue
Image.second.likes.where(user_id: User.first.id).count == 0
User.first
@result_true.result
@result_true.resut
@result_true
continue
IMAGE_VOTES_COUNT.delete_leaderboard
IMAGE_VOTES_COUNT.leaders(IMAGE_VOTES_COUNT.total_pages)
@images
continue
image = Image.find_by(id: params[:id])
continue
Comment.all
continue
s['user']
s[:user]
s.user
s = JSON.parse response.body
JSON.parse response.body.user
JSON.parse response.body
response.body.to_h
response.body[:user]
response.body
continue
response[:content_type]
response[:content]
response
pesponse
responce
continue
user
continue
request.headers['TOKEN_USER']
continue
request.headers['TOKEN_USER']
request.headers
request
continue
request.headers
request.headers['TOKEN_USER']
params
continue
request.headers['TOKEN_USER']
continue
request.headers['TOKEN_USER'] = User.first.api_token
request.headersrequest.headers['TOKEN_USER'] = User.first.api_token
request.headers
request.header
request
@controller
controller
continue
result.result
result
continue
token_insta.split('en=')[1]
continue
user.update_attributes(insta_token: token_insta.split('en=')[1])
continue
user.update_attributes(insta_token: token_insta.split('en=')[1])
user.errors
user.error
continue
user
user.update(insta_token: token_insta.split('en=')[1])
user
user.update(insta_token: 'dfdfdffe3333')
user
user.update_attributes(insta_token: token_insta.split('en=')[1])
user
user.update_attributes(insta_token: token_insta.split('en=')[1])
token_insta.split('en=')[1]
token_insta
continue
token_insta
continue
token_insta.split('en=')[1]
user.update_attributes(insta_token: token_insta.split('en=')[1])
continue
flash
continue
params
continue
params
continue
result.result
result
continue
image
continue
params.require(:image).permit(:image, :title_img, :tags, :user_id).to_unsafe_h
params: params.require(:image).permit(:image, :title_img, :tags, :user_id).to_unsafe_h
params
result
continue
params
continue
params
continue
session
auth_hash
continue
session
continue
result
continue
request.env['omniauth.auth']
request.env[omniauth.auth]
continue
result
current_user
continue
params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
params
result
continue
flash
continue
flash
continue
flash
continue
result.result
result
continue
ListImages.run!.reorder(likes_img: :ASC)
ListImages.run!.reorder(likes_img: :DESC)
ListImages.run!.reorder(likes_img: DESC)
ListImages.run!
images.reorder(likes_img: :DESC) if params[:sort_upvote] && !params[:sort_data]
continue
ListImages.run!
images
images.reorder(likes_img: :DESC) if params[:sort_upvote] && !params[:sort_data]
!params[:sort_upvote]
params[:sort_upvote]
params
continue
params
continue
params.permit(:condition_search, :sort_data).to_unsafe_h
params.permit(:condition_search, :sort_data)
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
Comment.find_by(id: params[:comment_id]) unless params[:comment_id].zero?
Image.find_by(id: params[:image_id]) if params[:image_id] && params[:comment_id].zero?
continue
params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
continue
params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
params: params.require(:comment).permit(:body,:image_id, :comment_id).to_unsafe_h
continue
params
continue
params[:comment_id]
params
continue
params.require(:comment).permit(:body,:image_id).to_unsafe_h
params.require(:comment).permit(:body,:image_id)
params.permit(:body,:image_id)
params
continue
params
continue
params
continue
params[:comment][:body].empty?
continue
IMAGE_VOTES_COUNT.delete_leaderboard
continue
IMAGE_VOTES_COUNT.delete_leaderboard
continue
IMAGE_VOTES_COUNT.leaders(IMAGE_VOTES_COUNT.total_pages)
continue
@ids
continue
IMAGE_VOTES_COUNT.delete_leaderboard
delete_leaderboard
continue
@ids
ids
continue
@ids
ids
continue
@ids
@images
continue
result.result
result
continue
result
continue
params[:text, :insta_tags]
params.require(:image).permit(:insta_tags,:text,:url_image,:user_id)
params.permit(:insta_tags,:text,:url_image,:user_id)
params[:insta_tags]
params
continue
params
continue
params.to_unsafe_h
params
continue
params.permit(
params[:insta_tags]
params
